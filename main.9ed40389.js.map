{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","addMarkup","className","title","data","document","body","insertAdjacentHTML","map","item","id","toUpperCase","join","request","url","fetch","then","response","ok","Error","status","statusText","json","getFirstReceivedDetails","phones","Promise","race","result","Array","of","getAllSuccessfulDetails","allSettled","filter","value","getThreeFastestDetails","promises","i","push","phoneIds","forEach","phone"],"mappings":";AAAA,aAEA,IAAMA,EAAW,4DAEjB,SAASC,EAAUC,EAAWC,EAAOC,GACnCC,SAASC,KAAKC,mBAAmB,YACjBL,qBAAAA,OAAAA,EACNC,kBAAAA,OAAAA,EAEFC,+BAAAA,OAAAA,EAAKI,IAAI,SAAAC,GAAeA,MAAAA,OAAAA,OAAAA,EAAKC,GAAGC,cAAnB,WAAyCC,KAAK,IAJnE,kCAUF,IAAMC,EAAU,SAACC,GACRC,OAAAA,MAASf,GAAAA,OAAAA,GAAWc,OAAAA,IACxBE,KAAK,SAAAC,GACA,IAACA,EAASC,GACN,MAAA,IAAIC,MAASF,GAAAA,OAAAA,EAASG,OAAYH,OAAAA,OAAAA,EAASI,aAG5CJ,OAAAA,EAASK,UAIhBC,EAA0B,SAACC,GAC/BC,QAAQC,KAAKF,EAAOhB,IAAI,SAAAE,GAAMG,OAAAA,EAAmBH,WAAAA,OAAAA,EAAvB,aACvBM,KAAK,SAAAW,GACJ1B,OAAAA,EAAU,iBAAkB,iBAAkB2B,MAAMC,GAAGF,OAIvDG,EAA0B,SAACN,GAC/BC,QAAQM,WAAWP,EAAOhB,IAAI,SAAAE,GAAMG,OAAAA,EAAmBH,WAAAA,OAAAA,EAAvB,aAC7BM,KAAK,SAAAW,GAKJ1B,EAAU,iBAAkB,iBAJP0B,EAClBK,OAAO,SAAAvB,GAAQA,MAAgB,cAAhBA,EAAKW,SACpBZ,IAAI,SAAAC,GAAQA,OAAAA,EAAKwB,YAMpBC,EAAyB,SAACV,GAGzB,IAFCW,IAAAA,EAAW,GAERC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAASE,KAAKZ,QAAQC,KACpBF,EAAOhB,IAAI,SAAAE,GAAMG,OAAAA,EAAmBH,WAAAA,OAAAA,EAAvB,cAIVyB,OAAAA,GAGTtB,EAAQ,gBACLG,KAAK,SAAAW,GACEW,IAAAA,EAAW,GAEjBX,EAAOY,QAAQ,SAAAC,GAASF,OAAAA,EAASD,KAAKG,EAAM9B,MAE5Ca,EAAwBe,GACxBR,EAAwBQ,GACxBJ,EAAuBI","file":"main.9ed40389.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/phone-catalogue-static/api';\n\nfunction addMarkup(className, title, data) {\n  document.body.insertAdjacentHTML('beforeend', `\n    <div class=\"${className}\">\n      <h2>${title}</h2>\n      <ul>\n        ${data.map(item => `<li>${item.id.toUpperCase()}</li>`).join('')}\n      </ul>\n    </div>\n  `);\n}\n\nconst request = (url) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nconst getFirstReceivedDetails = (phones) => {\n  Promise.race(phones.map(id => request(`/phones/${id}.json`)))\n    .then(result =>\n      addMarkup('first-received', 'First Received', Array.of(result))\n    );\n};\n\nconst getAllSuccessfulDetails = (phones) => {\n  Promise.allSettled(phones.map(id => request(`/phones/${id}.json`)))\n    .then(result => {\n      const settledItems = result\n        .filter(item => item.status === 'fulfilled')\n        .map(item => item.value);\n\n      addMarkup('all-successful', 'All Successful', settledItems);\n    });\n};\n\nconst getThreeFastestDetails = (phones) => {\n  const promises = [];\n\n  for (let i = 0; i < 3; i++) {\n    promises.push(Promise.race(\n      phones.map(id => request(`/phones/${id}.json`))\n    ));\n  }\n\n  return promises;\n};\n\nrequest('/phones.json')\n  .then(result => {\n    const phoneIds = [];\n\n    result.forEach(phone => phoneIds.push(phone.id));\n\n    getFirstReceivedDetails(phoneIds);\n    getAllSuccessfulDetails(phoneIds);\n    getThreeFastestDetails(phoneIds);\n  });\n"]}